instructions
============
- PSHUFD is for integers, SHUFPS is for floats:
  http://board.flatassembler.net/topic.php?t=13102, also PSHUFD seems to be
  the only instruction that can take 4 words from the same register and
  shuffle them. Seems a bit strange but a poster says that...
- MOVD is for integers, MOVSS is for floats, although they can technically
  be used for both. It's a pipeline thing.

asm
===
- Overkilling the 8 queens problem:
  http://davidad.github.io/blog/2014/02/25/overkilling-the-8-queens-problem
- Kernel from scratch:
  http://davidad.github.io/blog/2014/02/18/kernel-from-scratch/
- Making system calls from assembly in OSX (32 and 64-bit):
  https://filippo.io/making-system-calls-from-assembly-in-mac-os-x/

vm
==

- Ring buffers and mirrored memory, part I:
  https://www.mikeash.com/pyblog/friday-qa-2012-02-03-ring-buffers-and-mirrored-memory-part-i.html

clang/llvm
==========
- AST matchers and clang refactoring tools:
  http://eli.thegreenplace.net/2014/07/29/ast-matchers-and-clang-refactoring-tools

tips & tricks
=============

- [storing two 32 bit registers into an xmm
  register](http://stackoverflow.com/questions/2231694/storing-two-x86-32-bit-registers-into-128-bit-xmm-register)
- To see some of the crazy stuff that the JIT is generating, run `gobjdump
  -D -b binary -mi386 -Mx86-64 /tmp/jitcode`
- [loading a 128-bit SSE register from immediates,
  aligned](http://stackoverflow.com/questions/5007885/load-constant-floats-into-sse-registers)
- [LiraNuna's SIMD
  tricks](http://webcache.googleusercontent.com/search?q=cache:cMDSJGbFY-MJ:www.liranuna.com/sse-intrinsics-optimizations-in-popular-compilers/+&cd=3&hl=en&ct=clnk&gl=be)
  - fast zero vector generation with xorps
  - [instruction
    pairing](http://webcache.googleusercontent.com/search?q=cache:1_TGc4tfc4kJ:avisynth.nl/index.php/Filter_SDK/Instruction_pairing+&cd=1&hl=en&ct=clnk&gl=be)
    (this information looks possibly outdated, read phaeron's notes)
  - telling me not to use immediates to load values into an SSE vector
    because apparently it doesn't work well with caching (didn't exactly
    expect that, it should be in the instruction cache AND prefetched, no?)
- [vector normalization, SOA vs AOS vs. on the fly SOA (pretty
  good)](https://software.intel.com/en-us/articles/3d-vector-normalization-using-256-bit-intel-advanced-vector-extensions-intel-avx)

special swizzles
----------------

Some shuffles/swizzles get a special instruction, as noted:
- http://blogs.msdn.com/b/chuckw/archive/2012/09/11/directxmath-sse3-and-ssse3.aspx
- http://concatenative.org/wiki/view/SSE

SSE1: 0 1 0 1 movlhps
SSE1: 2 3 2 3 movhlps
SSE1: 0 0 1 1 unpcklps
SSE1: 2 2 3 3 unpckhps
SSE3: 0 0 2 2 movsldup
SSE3: 1 1 3 3 movshdup

dynamic registers
=================
Found this on the LuaJIT mailing list, could it be what I want? ref:
http://www.freelists.org/post/luajit/DynAsm-registers

calling a function
==================
sources:
- https://github.com/rdebath/Brainfuck/blob/master/bf2any/bf2jit.x86.dasc
- http://www.corsix.org/content/calling-external-functions-x64-dynasm

On x86-32, you can supply the function pointer as an immediate:

```asm
call &getchar
```

On x86-64, you have to move the 64-bit pointer into place first:

```asm
mov64 rax, (uintptr_t) getchar
call rax
```

matrix operations
=================
- https://github.com/LiraNuna/glsl-sse2
- https://github.com/rikusalminen/threedee-simd
- https://github.com/p12tic/libsimdpp
