// Most basic DynASM JIT; generates a trivial function that
// returns a given value, and executes it.
// code by Josh Haberman

// DynASM directives.
|.arch x64
|.actionlist actions

// This define affects "|" DynASM lines.  "Dst" must
// resolve to a dasm_State** that points to a dasm_State*.
#define Dst &state

int main(int argc, char *argv[]) {
  if (argc < 3) {
    fprintf(stderr, "Usage: %s <integer> <float>\n", argv[0]);
    return 1;
  }

  int num = atoi(argv[1]);
  const float fnum = (float)atof(argv[2]);
  int ifnum = *(int *)&fnum;

  dasm_State *state;
  /* dasm_init(&state, 1); */
  /* dasm_setup(&state, actions); */

  // Generate the code.  Each line appends to a buffer in
  // "state", but the code in this buffer is not fully linked
  // yet because labels can be referenced before they are
  // defined.
  //
  // The run-time value of C variable "num" is substituted
  // into the immediate value of the instruction.
  /* |  mov eax, num */
  /* |  ret */

  // Link the code and write it to executable memory.
  /* int (*fptr)() = jitcode(&state); */

  // Call the JIT-ted function.
  /* int ret = fptr(); */
  int ret = 42;
  /* assert(num == ret); */

  /* free the machine code. */

  /* free_jitcode(fptr); */
  /* dasm_free(&state); */

  dasm_init(&state, 1);
  dasm_setup(&state, actions);

  /* |  movss xmm0, fnum */
  /* |  movd xmm0, eax */
  /* |  movd xmm1, eax */
  /* |  shufps xmm0, xmm0, 0 */

  /* save the stack pointer */
  |  mov rbx, rsp
  /* align stack to 16 bytes, reserve 16 bytes, load dqword */
  |  and rsp, -16
  |  sub rsp, 16
  |  mov dword [rsp], 0x3f800000
  |  mov dword [rsp+4], 0x2a
  |  mov dword [rsp+8], 42
  |  mov dword [rsp+12], 333
  |  movaps xmm1, [rsp]
  |  push rbx
  |  push fnum
  |  push ifnum
  |  push fnum
  |  push ifnum
  |  mov eax, ifnum
  |  push ifnum
  |  push ifnum
  |  push ifnum
  |  push fnum
  |  push fnum
  |  push fnum
  |  mov eax, ifnum
  |  mov eax, num
  |  movd eax, xmm0
  |  addps xmm0, xmm0
  |  mulps xmm0, xmm0
  |  push fnum
  |  push ifnum
  |  pop rdi
  |  pop rdi
  |  pop rdi
  |  pop rdi
  |  pop rdi
  |  pop rdi
  |  pop rdi
  |  pop rdi
  |  pop rdi
  |  pop rdi
  |  pop rdi
  |  pop rdi
  |  pop rsp
  /* |  add rsp, 16 */
  |  ret

  float (*fltf)(float) = jitcode(&state);
  float fret = fltf(fnum);
  printf("the float value is %f == %f (0x%x == 0x%x))\n", fnum, fret,
          *(int *)&fnum, *(int *)&fret);
  free_jitcode(fltf);

  dasm_free(&state);

  return ret;
}
